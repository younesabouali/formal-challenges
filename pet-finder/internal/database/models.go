// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0

package database

import (
	"database/sql"
	"database/sql/driver"
	"fmt"
	"time"

	"github.com/google/uuid"
)

type EventNames string

func (e *EventNames) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = EventNames(s)
	case string:
		*e = EventNames(s)
	default:
		return fmt.Errorf("unsupported scan type for EventNames: %T", src)
	}
	return nil
}

type NullEventNames struct {
	EventNames EventNames
	Valid      bool // Valid is true if EventNames is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullEventNames) Scan(value interface{}) error {
	if value == nil {
		ns.EventNames, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.EventNames.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullEventNames) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.EventNames), nil
}

