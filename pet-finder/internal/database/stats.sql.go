// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: stats.sql

package database

import (
	"context"
)

const getActiveSpotter = `-- name: GetActiveSpotter :one
SELECT COUNT(role='user') from users
`

func (q *Queries) GetActiveSpotter(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, getActiveSpotter)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getAvgDailyEvent = `-- name: GetAvgDailyEvent :one
SELECT  from users
`

type GetAvgDailyEventRow struct {
}

func (q *Queries) GetAvgDailyEvent(ctx context.Context) (GetAvgDailyEventRow, error) {
	row := q.db.QueryRowContext(ctx, getAvgDailyEvent)
	var i GetAvgDailyEventRow
	err := row.Scan()
	return i, err
}

const getFoundPetPercentage = `-- name: GetFoundPetPercentage :one
SELECT CASE
         WHEN COUNT(*) = 0 THEN CAST(0 AS FLOAT)
         ELSE CAST(COUNT(status = 'found')  / COUNT(*) AS FLOAT)
       END
FROM missing_pets
`

func (q *Queries) GetFoundPetPercentage(ctx context.Context) (float64, error) {
	row := q.db.QueryRowContext(ctx, getFoundPetPercentage)
	var column_1 float64
	err := row.Scan(&column_1)
	return column_1, err
}

const getLostPetsCount = `-- name: GetLostPetsCount :one
SELECT COUNT(status='missing') FROM missing_pets
`

func (q *Queries) GetLostPetsCount(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, getLostPetsCount)
	var count int64
	err := row.Scan(&count)
	return count, err
}
